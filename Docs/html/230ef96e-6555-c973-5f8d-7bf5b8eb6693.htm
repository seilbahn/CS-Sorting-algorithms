<!DOCTYPE html ><html lang="en-US"><head><meta charset="utf-8" /><meta name="viewport" content="width=device-width, initial-scale=1" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" href="../css/bulma.css" /><link rel="stylesheet" href="../css/font-awesome.min.css" /><link rel="stylesheet" href="../css/presentationStyle.css" /><link rel="stylesheet" href="../css/vs.min.css" /><script src="../scripts/jquery-3.5.1.min.js"></script><script src="../scripts/clipboard.min.js"></script><script src="../scripts/highlight.min.js"></script><script src="../scripts/presentationStyle.js"></script><title>TreeSort&lt;T&gt; Class</title><meta name="Title" content="TreeSort&lt;T&gt;" /><meta name="Help.Id" content="T:Sorting.TreeSort`1" /><meta name="Help.ContentType" content="Reference" /><meta name="container" content="Sorting" /><meta name="guid" content="230ef96e-6555-c973-5f8d-7bf5b8eb6693" /><meta name="Description" content="Tree sort is a sorting technique that is totally dependent on the data structure of a binary search tree. In this sorting technique first, the binary search tree is created from the given data." /><meta name="tocFile" content="../toc/IDA.xml" /></head><body><div class="fixedLayout"><div id="Header" class="fixedHeader"><div class="pageHeader level mb-0 py-2 px-4"><div id="TitleContainer" class="level-left"><div id="DocumentationTitle" class="level-item">A Sandcastle Documented Class Library</div></div><div id="LangFilterSearchContainer" class="level-right"><div class="level-item"><div class="dropdown is-hoverable"><div class="dropdown-trigger"><button class="button" aria-haspopup="true" aria-controls="dropdown-menu"><span id="CurrentLanguage"></span><span class="icon is-small"><i class="fa fa-angle-down" aria-hidden="true"></i></span></button></div><div class="dropdown-menu" role="menu"><div id="LanguageSelections" class="dropdown-content"><a class="dropdown-item languageFilterItem" data-languageId="cs">C#</a></div></div></div></div><div class="level-item"><form id="SearchForm" action="#" onsubmit="TransferToSearchPage(); return false;"><div class="field"><div class="control has-icons-left"><input id="SearchTerms" class="input" type="text" maxlength="200" placeholder="Search" /><span class="icon is-small is-left"><i class="fa fa-search"></i></span><button id="SearchButton" type="submit" class="is-hidden"></button></div></div></form></div></div></div></div><div class="fixedContent"><nav class="breadcrumb my-1 px-2 border-bottom" role="navigation"><ul id="TopicBreadcrumbs" /></nav><div class="columns pl-5 pr-5 fixedContent"><div id="ShowHideTOCColumn" class="column is-hidden-tablet"><a id="ShowHideTOC">Show/Hide TOC</a></div><div id="TOCColumn" class="column is-hidden-mobile"><nav class="toc"><ul id="TableOfContents" class="toc-menu" /></nav></div><div id="TopicContent" class="column content is-7"><h1>Tree<wbr />Sort<span id="LSTF8086D7A_0" data-languageSpecificText="cpp=&lt;|cs=&lt;|fs=&lt;|vb=(Of |nu=("></span><span class="typeparameter">T</span><span id="LSTF8086D7A_1" data-languageSpecificText="cpp=&gt;|cs=&gt;|fs=&gt;|vb=)|nu=)"></span> Class</h1><div class="summary">
            Tree sort is a sorting technique that is totally dependent on the data structure of a binary search tree.<br />
            In this sorting technique first, the binary search tree is created from the given data.<br />
            A binary search tree is a special type of binary tree in which,
            for each parent node, the left child will be lesser or smaller than the parent node
            and the right child will be equal or greater than the parent node.<br />
            In the case of a binary search tree, the inorder traversal always displays the elements in sorted order.
            Hence, this property is used in this sorting.<br />
            After creating the binary search tree, only the inorder traversal is performed to display the array in sorted order.
            </div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Definition</h2><div id="IDBSection"><strong>Namespace:</strong> <a href="e0a1629f-63a8-3d0e-0483-0c14e8cf822b.htm">Sorting</a><br /><strong>Assembly:</strong> Sorting (in Sorting.dll) Version: 1.0.0<div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><span class="buttons"><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></span></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs"><span class="keyword">public</span> <span class="keyword">class</span> <span class="identifier">TreeSort</span>&lt;T&gt; : <span class="identifier">Algorithm</span>&lt;T&gt;
<span class="keyword">where</span> T : <span class="identifier">IComparable</span>
</code></pre></div></div><dl class="inheritanceHierarchy"><dt>Inheritance</dt><dd><a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>  <span class="icon is-small"><i class="fa fa-arrow-right"></i></span>  <a href="e63eac55-97ac-0cec-42ca-7b8a792f7e55.htm">Algorithm</a>  <span class="icon is-small"><i class="fa fa-arrow-right"></i></span>  <a href="a7e3968e-309e-b0b7-13e3-320de115b3ff.htm">Algorithm</a><span id="LSTF8086D7A_2" data-languageSpecificText="cpp=&lt;|cs=&lt;|fs=&lt;|vb=(Of |nu=("></span><span class="selflink"><span class="typeparameter">T</span></span><span id="LSTF8086D7A_3" data-languageSpecificText="cpp=&gt;|cs=&gt;|fs=&gt;|vb=)|nu=)"></span>  <span class="icon is-small"><i class="fa fa-arrow-right"></i></span>  <span class="selflink">TreeSort<span id="LSTF8086D7A_4" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LSTF8086D7A_5" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></span></dd></dl><h4>Type Parameters</h4><dl><dt class="has-text-weight-normal"><span class="parameter">T</span></dt><dd>sbyte, byte, short, ushort, int, uint,
            long, ulong, float, double, decimal, char</dd></dl></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Constructors</h2><div id="IDCFASection"><table id="ConstructorList" class="table is-hoverable"><tr><td><a href="25c7b51c-e8b9-34c6-0dbe-4cb2f412f5f8.htm">TreeSort<span id="LSTF8086D7A_6" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LSTF8086D7A_7" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a></td><td>
            Initializes a new instance of the BubbleSort class.
            </td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Properties</h2><div id="IDKFASection"><table id="PropertyList" class="table is-hoverable"><tr><td><a href="f238fd1c-c60f-b870-2e2e-cec6473cecc6.htm">AverageCase</a></td><td>
            The algorithm complexity in the average case.<br />
            It defines the average case of an algorithm’s time complexity,
            the Theta notation defines when the set of functions lies in both O(expression)
            and Omega(expression), then Theta notation is used.<br />
            This is how we define a time complexity average case for an algorithm. 
            <br />(Inherited from <a href="e63eac55-97ac-0cec-42ca-7b8a792f7e55.htm">Algorithm</a>)</td></tr><tr><td><a href="69ce8af9-2f5d-d05b-0b31-03ccc05b4abd.htm">BestCase</a></td><td>
            The algorithm complexity in the best case.<br />
            The array may be already sorted, and
            the best case will be "Ω(1)".<br />
            It defines the best case of an algorithm’s time complexity,
            the Omega notation defines whether the set of functions will grow
            faster or at the same rate as the expression.<br />
            Furthermore, it explains the minimum amount of time an algorithm
            requires to consider all input values.
            <br />(Inherited from <a href="e63eac55-97ac-0cec-42ca-7b8a792f7e55.htm">Algorithm</a>)</td></tr><tr><td><a href="3ad0fe48-64ee-59dc-9b58-664c19d730d4.htm">Comparisons</a></td><td>
            The amount of compare operations.
            <br />(Inherited from <a href="e63eac55-97ac-0cec-42ca-7b8a792f7e55.htm">Algorithm</a>)</td></tr><tr><td><a href="54178485-e3c8-e78a-e55f-3ad2ce1fd15f.htm">IsStabil</a></td><td>
            Is the sorting algorithm stabil or not?<br />
            Stable sorting algorithms maintain the relative order of records
            with equal keys.
            <br />(Inherited from <a href="e63eac55-97ac-0cec-42ca-7b8a792f7e55.htm">Algorithm</a>)</td></tr><tr><td><a href="578852c5-38c5-2632-d36f-0ced04a1cbb1.htm">Name</a></td><td>
            The name of the algorithm.<br />The enumeration SortingAlgorithm contains
            some algorithm names. The name DefaultSort is used by default.
            <br />(Inherited from <a href="e63eac55-97ac-0cec-42ca-7b8a792f7e55.htm">Algorithm</a>)</td></tr><tr><td><a href="3841ede5-be98-b91d-ceaf-ab8a41e43fbb.htm">Swaps</a></td><td>
            The amount of the changing keys position operations.
            <br />(Inherited from <a href="e63eac55-97ac-0cec-42ca-7b8a792f7e55.htm">Algorithm</a>)</td></tr><tr><td><a href="395be889-4289-c9e1-2d8c-34d296d29f6f.htm">Time</a></td><td>
            The Stopwatch class instance.
            <br />(Inherited from <a href="e63eac55-97ac-0cec-42ca-7b8a792f7e55.htm">Algorithm</a>)</td></tr><tr><td><a href="d8b04818-e58d-2f4f-6e8c-0bc6f66c3004.htm">WorstCase</a></td><td>
            The algorithm complexity in the worst case.<br />
            It defines worst-case time complexity by using the Big-O notation,
            which determines the set of functions grows slower than or at the same rate as the expression.<br />
            Furthermore, it explains the maximum amount of time an algorithm requires to consider all input values.
            <br />(Inherited from <a href="e63eac55-97ac-0cec-42ca-7b8a792f7e55.htm">Algorithm</a>)</td></tr><tr><td><a href="83880cd0-da9d-4f70-01bf-6a0fc3e475cc.htm">WorstCaseSpaceComplexity</a></td><td>
            Memory usage (and use of other computer resources).<br />
            In particular, some sorting algorithms are "in-place".<br />
            Strictly, an in-place sort needs only O(1) memory beyond the items being sorted;
            sometimes O(log n) additional memory is considered "in-place".
            <br />(Inherited from <a href="e63eac55-97ac-0cec-42ca-7b8a792f7e55.htm">Algorithm</a>)</td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Methods</h2><div id="IDAFASection"><table id="MethodList" class="table is-hoverable"><tr><td><a href="9efdbf85-089a-307e-98e9-79746b4b12ac.htm">Compare</a></td><td>
            The method is created to compare two generic variables.<br /><span class="code">
            Compare(x, y);<br />
            if (x &gt; y) then it returns &gt; 0<br />
            if (x == y) then it returns 0<br />
            if (x &lt; y) then it returns &lt; 0
            </span><br />(Inherited from <a href="a7e3968e-309e-b0b7-13e3-320de115b3ff.htm">Algorithm<span id="LSTF8086D7A_8" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LSTF8086D7A_9" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a>)</td></tr><tr><td><a href="https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)" target="_blank" rel="noopener noreferrer">Equals</a></td><td>Determines whether the specified object is equal to the current object.<br />(Inherited from <a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>)</td></tr><tr><td><a href="https://learn.microsoft.com/dotnet/api/system.object.finalize#system-object-finalize" target="_blank" rel="noopener noreferrer">Finalize</a></td><td>Allows an object to try to free resources and perform other cleanup operations before it is reclaimed by garbage collection.<br />(Inherited from <a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>)</td></tr><tr><td><a href="https://learn.microsoft.com/dotnet/api/system.object.gethashcode#system-object-gethashcode" target="_blank" rel="noopener noreferrer">GetHashCode</a></td><td>Serves as the default hash function.<br />(Inherited from <a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>)</td></tr><tr><td><a href="https://learn.microsoft.com/dotnet/api/system.object.gettype#system-object-gettype" target="_blank" rel="noopener noreferrer">GetType</a></td><td>Gets the <a href="https://learn.microsoft.com/dotnet/api/system.type" target="_blank" rel="noopener noreferrer">Type</a> of the current instance.<br />(Inherited from <a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>)</td></tr><tr><td><a href="https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone#system-object-memberwiseclone" target="_blank" rel="noopener noreferrer">MemberwiseClone</a></td><td>Creates a shallow copy of the current <a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>.<br />(Inherited from <a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>)</td></tr><tr><td><a href="e225a426-115f-1744-dd5b-38b740993e7d.htm">Sort(<span id="LSTF8086D7A_10" data-languageSpecificText="cpp=array&lt;"></span>Byte<span id="LSTF8086D7A_11" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, SortingType)</a></td><td>
            The sorting algorithm method.<br />It creates a copy
            of the input array and works only with the new array.<br />
            The method returns a reference to the new sorted array.
            <br />(Inherited from <a href="a7e3968e-309e-b0b7-13e3-320de115b3ff.htm">Algorithm<span id="LSTF8086D7A_12" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LSTF8086D7A_13" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a>)</td></tr><tr><td><a href="992c1b35-5067-b9f4-15a5-39d6feb9bfc9.htm">Sort(<span id="LSTF8086D7A_14" data-languageSpecificText="cpp=array&lt;"></span>Char<span id="LSTF8086D7A_15" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, SortingType)</a></td><td>
            The sorting algorithm method.<br />It creates a copy
            of the input array and works only with the new array.<br />
            The method returns a reference to the new sorted array.
            <br />(Inherited from <a href="a7e3968e-309e-b0b7-13e3-320de115b3ff.htm">Algorithm<span id="LSTF8086D7A_16" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LSTF8086D7A_17" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a>)</td></tr><tr><td><a href="f2788f53-da67-b35b-82d0-ca51f524150c.htm">Sort(<span id="LSTF8086D7A_18" data-languageSpecificText="cpp=array&lt;"></span>Decimal<span id="LSTF8086D7A_19" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, SortingType)</a></td><td>
            The sorting algorithm method.<br />It creates a copy
            of the input array and works only with the new array.<br />
            The method returns a reference to the new sorted array.
            <br />(Inherited from <a href="a7e3968e-309e-b0b7-13e3-320de115b3ff.htm">Algorithm<span id="LSTF8086D7A_20" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LSTF8086D7A_21" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a>)</td></tr><tr><td><a href="7a1a60fc-e2c8-a765-ed3b-3ca2b0576219.htm">Sort(<span id="LSTF8086D7A_22" data-languageSpecificText="cpp=array&lt;"></span>Double<span id="LSTF8086D7A_23" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, SortingType)</a></td><td>
            The sorting algorithm method.<br />It creates a copy
            of the input array and works only with the new array.<br />
            The method returns a reference to the new sorted array.
            <br />(Inherited from <a href="a7e3968e-309e-b0b7-13e3-320de115b3ff.htm">Algorithm<span id="LSTF8086D7A_24" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LSTF8086D7A_25" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a>)</td></tr><tr><td><a href="e2e7326c-6d95-bdf9-96b7-f3ca97e03705.htm">Sort(<span id="LSTF8086D7A_26" data-languageSpecificText="cpp=array&lt;"></span>Int16<span id="LSTF8086D7A_27" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, SortingType)</a></td><td>
            The sorting algorithm method.<br />It creates a copy
            of the input array and works only with the new array.<br />
            The method returns a reference to the new sorted array.
            <br />(Inherited from <a href="a7e3968e-309e-b0b7-13e3-320de115b3ff.htm">Algorithm<span id="LSTF8086D7A_28" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LSTF8086D7A_29" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a>)</td></tr><tr><td><a href="c3926ba1-f03c-28d6-064a-65036944f3d5.htm">Sort(<span id="LSTF8086D7A_30" data-languageSpecificText="cpp=array&lt;"></span>Int32<span id="LSTF8086D7A_31" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, SortingType)</a></td><td>
            The sorting algorithm method.<br />It creates a copy
            of the input array and works only with the new array.<br />
            The method returns a reference to the new sorted array.
            <br />(Inherited from <a href="a7e3968e-309e-b0b7-13e3-320de115b3ff.htm">Algorithm<span id="LSTF8086D7A_32" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LSTF8086D7A_33" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a>)</td></tr><tr><td><a href="3ef7f07c-352e-3168-c606-6095e68fca1f.htm">Sort(<span id="LSTF8086D7A_34" data-languageSpecificText="cpp=array&lt;"></span>Int64<span id="LSTF8086D7A_35" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, SortingType)</a></td><td>
            The sorting algorithm method.<br />It creates a copy
            of the input array and works only with the new array.<br />
            The method returns a reference to the new sorted array.
            <br />(Inherited from <a href="a7e3968e-309e-b0b7-13e3-320de115b3ff.htm">Algorithm<span id="LSTF8086D7A_36" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LSTF8086D7A_37" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a>)</td></tr><tr><td><a href="e19af562-077e-9ad7-867e-e496b588c5c2.htm">Sort(<span id="LSTF8086D7A_38" data-languageSpecificText="cpp=array&lt;"></span>SByte<span id="LSTF8086D7A_39" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, SortingType)</a></td><td>
            The sorting algorithm method.<br />It creates a copy
            of the input array and works only with the new array.<br />
            The method returns a reference to the new sorted array.
            <br />(Inherited from <a href="a7e3968e-309e-b0b7-13e3-320de115b3ff.htm">Algorithm<span id="LSTF8086D7A_40" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LSTF8086D7A_41" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a>)</td></tr><tr><td><a href="126ddea1-f2cd-7233-9d77-3edb7a032e2f.htm">Sort(<span id="LSTF8086D7A_42" data-languageSpecificText="cpp=array&lt;"></span>Single<span id="LSTF8086D7A_43" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, SortingType)</a></td><td>
            The sorting algorithm method.<br />It creates a copy
            of the input array and works only with the new array.<br />
            The method returns a reference to the new sorted array.
            <br />(Inherited from <a href="a7e3968e-309e-b0b7-13e3-320de115b3ff.htm">Algorithm<span id="LSTF8086D7A_44" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LSTF8086D7A_45" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a>)</td></tr><tr><td><a href="d8aab2f2-3595-6939-6b78-09fdc4170cdb.htm">Sort(<span id="LSTF8086D7A_46" data-languageSpecificText="cpp=array&lt;"></span>T<span id="LSTF8086D7A_47" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, SortingType)</a></td><td>
            The sorting algorithm method.<br />It creates a copy
            of the input array and works only with the new array.<br />
            The method returns a reference to the new sorted array.
            <br />(Overrides <a href="63a1f941-fefe-1a0e-bd9e-672cac73e8dd.htm">Algorithm<span id="LSTF8086D7A_48" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LSTF8086D7A_49" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span><span id="LSTF8086D7A_50" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>Sort(<span id="LSTF8086D7A_51" data-languageSpecificText="cpp=array&lt;"></span>T<span id="LSTF8086D7A_52" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, SortingType)</a>)</td></tr><tr><td><a href="6894903f-78e4-4653-9859-7050a5897226.htm">Sort(<span id="LSTF8086D7A_53" data-languageSpecificText="cpp=array&lt;"></span>UInt16<span id="LSTF8086D7A_54" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, SortingType)</a></td><td>
            The sorting algorithm method.<br />It creates a copy
            of the input array and works only with the new array.<br />
            The method returns a reference to the new sorted array.
            <br />(Inherited from <a href="a7e3968e-309e-b0b7-13e3-320de115b3ff.htm">Algorithm<span id="LSTF8086D7A_55" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LSTF8086D7A_56" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a>)</td></tr><tr><td><a href="22e837b9-c785-189a-4711-a9b26323ca8f.htm">Sort(<span id="LSTF8086D7A_57" data-languageSpecificText="cpp=array&lt;"></span>UInt32<span id="LSTF8086D7A_58" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, SortingType)</a></td><td>
            The sorting algorithm method.<br />It creates a copy
            of the input array and works only with the new array.<br />
            The method returns a reference to the new sorted array.
            <br />(Inherited from <a href="a7e3968e-309e-b0b7-13e3-320de115b3ff.htm">Algorithm<span id="LSTF8086D7A_59" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LSTF8086D7A_60" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a>)</td></tr><tr><td><a href="3e9e2f11-8436-a406-9a9b-10e1094df476.htm">Sort(<span id="LSTF8086D7A_61" data-languageSpecificText="cpp=array&lt;"></span>UInt64<span id="LSTF8086D7A_62" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, SortingType)</a></td><td>
            The sorting algorithm method.<br />It creates a copy
            of the input array and works only with the new array.<br />
            The method returns a reference to the new sorted array.
            <br />(Inherited from <a href="a7e3968e-309e-b0b7-13e3-320de115b3ff.htm">Algorithm<span id="LSTF8086D7A_63" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LSTF8086D7A_64" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a>)</td></tr><tr><td><a href="f1cdab99-c123-f221-8c53-a003edb03b01.htm">Swap</a></td><td>
            The method swaps two keys in the array:
            array[i] ↔ array[j].
            <br />(Inherited from <a href="a7e3968e-309e-b0b7-13e3-320de115b3ff.htm">Algorithm<span id="LSTF8086D7A_65" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LSTF8086D7A_66" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a>)</td></tr><tr><td><a href="https://learn.microsoft.com/dotnet/api/system.object.tostring#system-object-tostring" target="_blank" rel="noopener noreferrer">ToString</a></td><td>Returns a string that represents the current object.<br />(Inherited from <a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>)</td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>See Also</h2><div id="seeAlsoSection"><h4>Reference</h4><div><a href="e0a1629f-63a8-3d0e-0483-0c14e8cf822b.htm">Sorting Namespace</a></div></div></div><div id="InThisArticleColumn" class="column is-hidden-mobile"><nav class="menu sticky is-hidden"><p class="menu-label"><strong>In This Article</strong></p><ul id="InThisArticleMenu" class="menu-list"><li><a class="quickLink">Definition</a></li><li><a class="quickLink">Constructors</a></li><li><a class="quickLink">Properties</a></li><li><a class="quickLink">Methods</a></li><li><a class="quickLink">See Also</a></li></ul></nav></div></div></div><footer id="PageFooter" class="footer border-top py-3 fixedFooter"><div class="columns"><div class="column"> 
				</div><div class="column"> 
				</div></div></footer></div><script>$(function(){
SetDefaultLanguage("cs");
LoadTocFile(null, null);
InitializeQuickLinks();

$(".toggleSection" ).click(function () {
    SectionExpandCollapse(this);
});

$(".toggleSection").keypress(function () {
    SectionExpandCollapseCheckKey(this, event)
});
hljs.highlightAll();
});</script></body></html>